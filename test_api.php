<?php
/**
 * Comprehensive API Test Suite for Organizations API
 * Tests all available endpoints with various scenarios
 */

$baseUrl = 'http://app:8000/api';
$apiKey = 'test-api-key-12345';

// Test results storage
$testResults = [];
$passedTests = 0;
$totalTests = 0;

/**
 * Helper function to make HTTP requests
 */
function makeRequest($url, $method = 'GET', $headers = []) {
    // URL encode the URL to handle special characters
    $encodedUrl = $url;
    if (strpos($url, '?') !== false) {
        $parts = explode('?', $url, 2);
        $encodedUrl = $parts[0] . '?' . urlencode($parts[1]);
    }
    
    $context = stream_context_create([
        'http' => [
            'method' => $method,
            'header' => implode("\r\n", $headers),
            'timeout' => 30,
            'ignore_errors' => true // This allows us to get response body even for 4xx/5xx
        ]
    ]);
    
    $response = @file_get_contents($encodedUrl, false, $context);
    
    // Get HTTP status code from response headers
    $httpCode = 'Unknown';
    if (isset($http_response_header[0])) {
        $httpCode = $http_response_header[0];
    }
    
    // Check if we got a response (even for error status codes)
    if ($response !== false) {
        return [
            'success' => true,
            'data' => $response,
            'http_code' => $httpCode
        ];
    } else {
        return [
            'success' => false,
            'error' => error_get_last()['message'] ?? 'Unknown error',
            'http_code' => $httpCode
        ];
    }
}

/**
 * Helper function to run a test
 */
function runTest($testName, $url, $expectedHttpCode = '200 OK') {
    global $testResults, $passedTests, $totalTests, $apiKey;
    
    $totalTests++;
    echo "\n=== –¢–µ—Å—Ç $totalTests: $testName ===\n";
    echo "URL: $url\n";
    
    $headers = ["X-API-Key: $apiKey"];
    $response = makeRequest($url, 'GET', $headers);
    
    if ($response['success']) {
        $httpCode = $response['http_code'];
        
        echo "HTTP Code: $httpCode\n";
        echo "Response: " . substr($response['data'], 0, 500) . (strlen($response['data']) > 500 ? '...' : '') . "\n";
        
        $passed = false;
        
        // Check for 200 OK (successful responses)
        if (strpos($httpCode, '200') !== false) {
            $passed = true;
        }
        // Check for 400 Bad Request or 302 Found (expected for validation errors)
        elseif ((strpos($httpCode, '400') !== false || strpos($httpCode, '302') !== false) && (
            strpos($url, '/organizations/search/radius') !== false ||
            strpos($url, '/organizations/search/area') !== false ||
            strpos($url, '/organizations/search/name') !== false ||
            strpos($url, 'invalid') !== false
        )) {
            $passed = true;
        }
        // Check for 404 Not Found (expected for non-existent resources)
        elseif (strpos($httpCode, '404') !== false && (
            strpos($url, '/organizations/building/999') !== false ||
            strpos($url, '/organizations/activity/999') !== false ||
            strpos($url, '/organizations/999') !== false ||
            strpos($url, '/organizations/search/activity-tree/999') !== false
        )) {
            $passed = true;
        }
        
        if ($passed) {
            echo "‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù\n";
            $passedTests++;
            $testResults[] = ['name' => $testName, 'status' => 'PASSED', 'http_code' => $httpCode];
        } else {
            echo "‚ùå –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù (–Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π HTTP –∫–æ–¥)\n";
            $testResults[] = ['name' => $testName, 'status' => 'FAILED', 'http_code' => $httpCode, 'error' => 'Unexpected HTTP code'];
        }
    } else {
        echo "‚ùå –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù (–æ—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è)\n";
        echo "Error: " . $response['error'] . "\n";
        $testResults[] = ['name' => $testName, 'status' => 'FAILED', 'error' => $response['error']];
    }
}

/**
 * Test without API key (should fail)
 */
function runUnauthorizedTest($testName, $url) {
    global $testResults, $passedTests, $totalTests;
    
    $totalTests++;
    echo "\n=== –¢–µ—Å—Ç $totalTests: $testName (–±–µ–∑ API –∫–ª—é—á–∞) ===\n";
    echo "URL: $url\n";
    
    $response = makeRequest($url, 'GET', []);
    
    if ($response['success']) {
        $httpCode = $response['http_code'];
        echo "HTTP Code: $httpCode\n";
        
        if (strpos($httpCode, '401') !== false || strpos($httpCode, '403') !== false) {
            echo "‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù (–ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω –±–µ–∑ API –∫–ª—é—á–∞)\n";
            $passedTests++;
            $testResults[] = ['name' => $testName, 'status' => 'PASSED', 'http_code' => $httpCode];
        } else {
            echo "‚ùå –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù (–¥–æ–ª–∂–µ–Ω –±—ã–ª –±—ã—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω)\n";
            $testResults[] = ['name' => $testName, 'status' => 'FAILED', 'http_code' => $httpCode, 'error' => 'Should have been rejected'];
        }
    } else {
        echo "‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù (—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ)\n";
        $passedTests++;
        $testResults[] = ['name' => $testName, 'status' => 'PASSED', 'error' => 'Connection rejected'];
    }
}

echo "=== –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï ORGANIZATIONS API ===\n";
echo "Base URL: $baseUrl\n";
echo "API Key: $apiKey\n";
echo "–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: " . date('Y-m-d H:i:s') . "\n";

// ===== –¢–ï–°–¢–´ –ë–ï–ó API –ö–õ–Æ–ß–ê =====
echo "\nüîí –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ë–ï–ó API –ö–õ–Æ–ß–ê (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã):";
runUnauthorizedTest('–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–¥–∞–Ω–∏–π', $baseUrl . '/buildings');
runUnauthorizedTest('–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –≤ –∑–¥–∞–Ω–∏–∏', $baseUrl . '/organizations/building/1');
runUnauthorizedTest('–ü–æ–∏—Å–∫ –ø–æ —Ä–∞–¥–∏—É—Å—É', $baseUrl . '/organizations/search/radius?latitude=55.7558&longitude=37.6176&radius=5');

// ===== –û–°–ù–û–í–ù–´–ï –¢–ï–°–¢–´ =====
echo "\nüìã –û–°–ù–û–í–ù–´–ï –¢–ï–°–¢–´ API:";

// 1. –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–¥–∞–Ω–∏–π
runTest('–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–¥–∞–Ω–∏–π', $baseUrl . '/buildings');

// 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –∑–¥–∞–Ω–∏–∏
runTest('–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –≤ –∑–¥–∞–Ω–∏–∏ ID=1', $baseUrl . '/organizations/building/1');
runTest('–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –≤ –∑–¥–∞–Ω–∏–∏ ID=2', $baseUrl . '/organizations/building/2');
runTest('–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –≤ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º –∑–¥–∞–Ω–∏–∏', $baseUrl . '/organizations/building/999');

// 3. –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –ø–æ –≤–∏–¥—É –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
runTest('–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ ID=1', $baseUrl . '/organizations/activity/1');
runTest('–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ ID=2', $baseUrl . '/organizations/activity/2');
runTest('–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏', $baseUrl . '/organizations/activity/999');

// 4. –ü–æ–∏—Å–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –≤ —Ä–∞–¥–∏—É—Å–µ
runTest('–ü–æ–∏—Å–∫ –≤ —Ä–∞–¥–∏—É—Å–µ (—Ü–µ–Ω—Ç—Ä –ú–æ—Å–∫–≤—ã, 5–∫–º)', $baseUrl . '/organizations/search/radius?latitude=55.7558&longitude=37.6176&radius=5');
runTest('–ü–æ–∏—Å–∫ –≤ —Ä–∞–¥–∏—É—Å–µ (—Ü–µ–Ω—Ç—Ä –ú–æ—Å–∫–≤—ã, 1–∫–º)', $baseUrl . '/organizations/search/radius?latitude=55.7558&longitude=37.6176&radius=1');
runTest('–ü–æ–∏—Å–∫ –≤ —Ä–∞–¥–∏—É—Å–µ (–±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤)', $baseUrl . '/organizations/search/radius');

// 5. –ü–æ–∏—Å–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –≤ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
runTest('–ü–æ–∏—Å–∫ –≤ –æ–±–ª–∞—Å—Ç–∏ (–ú–æ—Å–∫–≤–∞)', $baseUrl . '/organizations/search/area?min_lat=55.5&max_lat=56.0&min_lng=37.3&max_lng=37.8');
runTest('–ü–æ–∏—Å–∫ –≤ –æ–±–ª–∞—Å—Ç–∏ (–º–∞–ª–∞—è –æ–±–ª–∞—Å—Ç—å)', $baseUrl . '/organizations/search/area?min_lat=55.75&max_lat=55.76&min_lng=37.61&max_lng=37.62');
runTest('–ü–æ–∏—Å–∫ –≤ –æ–±–ª–∞—Å—Ç–∏ (–±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤)', $baseUrl . '/organizations/search/area');

// 6. –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ ID
runTest('–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è ID=1', $baseUrl . '/organizations/1');
runTest('–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è ID=2', $baseUrl . '/organizations/2');
runTest('–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è', $baseUrl . '/organizations/999');

// 7. –ü–æ–∏—Å–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –ø–æ –≤–∏–¥—É –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–≤–∫–ª—é—á–∞—è –¥–æ—á–µ—Ä–Ω–∏–µ)
runTest('–ü–æ–∏—Å–∫ –ø–æ –¥–µ—Ä–µ–≤—É –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ ID=1', $baseUrl . '/organizations/search/activity-tree/1');
runTest('–ü–æ–∏—Å–∫ –ø–æ –¥–µ—Ä–µ–≤—É –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ ID=2', $baseUrl . '/organizations/search/activity-tree/2');
runTest('–ü–æ–∏—Å–∫ –ø–æ –¥–µ—Ä–µ–≤—É –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏', $baseUrl . '/organizations/search/activity-tree/999');

// 8. –ü–æ–∏—Å–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
runTest('–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é "–†–æ–≥–∞"', $baseUrl . '/organizations/search/name?name=–†–æ–≥–∞');
runTest('–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é "–û–û–û"', $baseUrl . '/organizations/search/name?name=–û–û–û');
runTest('–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é "–†–µ—Å—Ç–æ—Ä–∞–Ω"', $baseUrl . '/organizations/search/name?name=–†–µ—Å—Ç–æ—Ä–∞–Ω');
runTest('–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é (–±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞)', $baseUrl . '/organizations/search/name');
runTest('–ü–æ–∏—Å–∫ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è', $baseUrl . '/organizations/search/name?name=–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è');

// ===== –¢–ï–°–¢–´ –ì–†–ê–ù–ò–ß–ù–´–• –°–õ–£–ß–ê–ï–í =====
echo "\nüîç –¢–ï–°–¢–´ –ì–†–ê–ù–ò–ß–ù–´–• –°–õ–£–ß–ê–ï–í:";

// –¢–µ—Å—Ç—ã —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
runTest('–ü–æ–∏—Å–∫ –≤ —Ä–∞–¥–∏—É—Å–µ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏', $baseUrl . '/organizations/search/radius?latitude=invalid&longitude=invalid&radius=5');
runTest('–ü–æ–∏—Å–∫ –≤ –æ–±–ª–∞—Å—Ç–∏ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏', $baseUrl . '/organizations/search/area?min_lat=invalid&max_lat=invalid&min_lng=invalid&max_lng=invalid');

// –¢–µ—Å—Ç—ã —Å –æ—á–µ–Ω—å –±–æ–ª—å—à–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
runTest('–ü–æ–∏—Å–∫ –≤ —Ä–∞–¥–∏—É—Å–µ —Å –±–æ–ª—å—à–∏–º —Ä–∞–¥–∏—É—Å–æ–º', $baseUrl . '/organizations/search/radius?latitude=55.7558&longitude=37.6176&radius=1000');
runTest('–ü–æ–∏—Å–∫ –≤ –æ–±–ª–∞—Å—Ç–∏ —Å –±–æ–ª—å—à–∏–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏', $baseUrl . '/organizations/search/area?min_lat=0&max_lat=90&min_lng=-180&max_lng=180');

// ===== –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê =====
echo "\n" . str_repeat("=", 60) . "\n";
echo "üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø\n";
echo str_repeat("=", 60) . "\n";
echo "–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: $totalTests\n";
echo "–ü—Ä–æ–π–¥–µ–Ω–æ: $passedTests\n";
echo "–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: " . ($totalTests - $passedTests) . "\n";
echo "–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: " . round(($passedTests / $totalTests) * 100, 2) . "%\n";

if ($passedTests == $totalTests) {
    echo "\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!\n";
} else {
    echo "\n‚ö†Ô∏è  –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´\n";
}

echo "\nüìã –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:\n";
foreach ($testResults as $result) {
    $status = $result['status'] === 'PASSED' ? '‚úÖ' : '‚ùå';
    echo "$status {$result['name']} - {$result['status']}";
    if (isset($result['http_code'])) {
        echo " (HTTP: {$result['http_code']})";
    }
    if (isset($result['error'])) {
        echo " - {$result['error']}";
    }
    echo "\n";
}

echo "\n–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: " . date('Y-m-d H:i:s') . "\n";
echo "=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û ===\n"; 